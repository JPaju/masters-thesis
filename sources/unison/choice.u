structural ability Choice where
  choose : Boolean

-- ----------------------------------- HANDLERS -----------------------------------

constantChoice : Boolean -> '{Choice} a -> {} a
constantChoice choice thunk =
  handle !thunk with cases
    { choose -> resume }  -> constantChoice choice '(resume choice)
    { a }                 -> a

alwaysTrue  : '{Choice} a -> {} a
alwaysTrue = constantChoice true

alwaysFalse : '{Choice} a -> {} a
alwaysFalse = constantChoice false

collectAll : '{Choice} a -> {} [a]
collectAll thunk = 
  collectHandler : Request Choice a -> {} [a]
  collectHandler = cases
    { choose -> resume }  ->
      (handle resume true with collectHandler) ++
      (handle resume false with collectHandler)
    { a } -> [a]

  handle !thunk with collectHandler

maxResult : '{Choice} Nat -> {} Nat
maxResult thunk = 
  collectAll thunk |> List.foldLeft Nat.max 0

randomChoice : '{Choice} a -> '{Random} a
randomChoice thunk =
  choiceToRandom : Request Choice a -> {Random} a
  choiceToRandom = cases
    { choose -> resume }  -> handle (resume !Random.boolean) with choiceToRandom

  '(handle !thunk with choiceToRandom)


-- --------------------------------- COMPUTATIONS ---------------------------------

xor : '{Choice} Boolean
xor _ =
  p = choose
  q = choose
  ((p || q) && not (p && q))

pickNumber : '{Choice} Nat
pickNumber = do
  if choose then
    if choose then 12 else 21
  else
    if choose then 34 else 43



-- ------------------------------------- RUN -------------------------------------

> alwaysFalse pickNumber -- 43
> alwaysTrue pickNumber  -- 12
> collectAll pickNumber -- [12, 21, 34, 43]
-- > maxResult pickNumber -- 43
> collectAll pickNumber |> List.foldLeft Nat.max 0 -- 43

-- > collectAll xor
